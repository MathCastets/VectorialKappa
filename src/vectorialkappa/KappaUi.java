/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package vectorialkappa;

import java.io.File;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.table.AbstractTableModel;

/**
 * The main ui
 * @author Castets
 */
public class KappaUi extends javax.swing.JFrame {


	private DefaultListModel resultModel = new DefaultListModel();
	private KappaCalculator kappaCalculator;
	/**
	 * Creates new form KappaUi
	 */
	public KappaUi() {
		initComponents();
		shapeFileUi1.setName("First shapefile loading");	
		shapeFileUi2.setName("Shapefile to compare loading");	
		jListResult.setModel(resultModel);
		shapeFileUi1.setListModel(resultModel);
		shapeFileUi2.setListModel(resultModel);
	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                jScrollPane2 = new javax.swing.JScrollPane();
                jTable1 = new javax.swing.JTable();
                shapeFileUi1 = new vectorialkappa.ShapeFileUi();
                shapeFileUi2 = new vectorialkappa.ShapeFileUi();
                jScrollPane1 = new javax.swing.JScrollPane();
                jListResult = new javax.swing.JList();
                jButtonClose = new javax.swing.JButton();
                jPanel2 = new javax.swing.JPanel();
                jButtonCompute = new javax.swing.JButton();
                jButtonExport = new javax.swing.JButton();
                jButtonReset = new javax.swing.JButton();
                jScrollPane3 = new javax.swing.JScrollPane();
                jTableMatrix = new javax.swing.JTable();
                jLabel1 = new javax.swing.JLabel();
                jLabel2 = new javax.swing.JLabel();
                jLabel3 = new javax.swing.JLabel();
                jTextFieldKappa = new javax.swing.JTextField();
                jLabel4 = new javax.swing.JLabel();
                jTextFieldSd = new javax.swing.JTextField();

                jTable1.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {
                                {null, null, null, null},
                                {null, null, null, null},
                                {null, null, null, null},
                                {null, null, null, null}
                        },
                        new String [] {
                                "Title 1", "Title 2", "Title 3", "Title 4"
                        }
                ));
                jScrollPane2.setViewportView(jTable1);

                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                setTitle("Vectorial kappa computation");

                jScrollPane1.setViewportView(jListResult);

                jButtonClose.setText("Close");
                jButtonClose.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButtonCloseActionPerformed(evt);
                        }
                });

                jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

                jButtonCompute.setText("Compute Kappa");
                jButtonCompute.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButtonComputeActionPerformed(evt);
                        }
                });

                jButtonExport.setText("Export");
                jButtonExport.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButtonExportActionPerformed(evt);
                        }
                });

                jButtonReset.setText("Reset");
                jButtonReset.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButtonResetActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
                jPanel2.setLayout(jPanel2Layout);
                jPanel2Layout.setHorizontalGroup(
                        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jButtonCompute)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonExport, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonReset, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
                );
                jPanel2Layout.setVerticalGroup(
                        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButtonCompute)
                                        .addComponent(jButtonExport)
                                        .addComponent(jButtonReset))
                                .addGap(13, 13, 13))
                );

                jTableMatrix.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {
                                {null, null, null, null},
                                {null, null, null, null},
                                {null, null, null, null},
                                {null, null, null, null}
                        },
                        new String [] {
                                "Title 1", "Title 2", "Title 3", "Title 4"
                        }
                ));
                jScrollPane3.setViewportView(jTableMatrix);

                jLabel1.setText("Confusion matrix :");

                jLabel2.setText("Info :");

                jLabel3.setText("Kappa :");

                jTextFieldKappa.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jTextFieldKappaActionPerformed(evt);
                        }
                });

                jLabel4.setText("Standard deviation :");

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(shapeFileUi1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 610, Short.MAX_VALUE)
                                        .addComponent(shapeFileUi2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane1)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(jButtonClose, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane3)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel2))
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTextFieldKappa, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTextFieldSd)))
                                .addContainerGap())
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(shapeFileUi1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(shapeFileUi2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2)
                                .addGap(5, 5, 5)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(jTextFieldKappa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel4)
                                        .addComponent(jTextFieldSd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonClose)
                                .addContainerGap(170, Short.MAX_VALUE))
                );

                pack();
        }// </editor-fold>//GEN-END:initComponents

        private void jButtonComputeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonComputeActionPerformed
                // TODO add your handling code here:
		
		Layer layer1 = shapeFileUi1.getLayer();
		Layer layer2 = shapeFileUi2.getLayer();

		if(layer1 != null && layer2 != null){
			
			kappaCalculator = new KappaCalculator(layer1, layer2);
			kappaCalculator.fillMatrix();
			kappaCalculator.compute();


			
		}
		jTextFieldKappa.setText(kappaCalculator.getKappa()+"");
                jTextFieldSd.setText(kappaCalculator.getStandardDeviation()+"");
		MatrixModel model = new MatrixModel(layer1.getTypes(), kappaCalculator.getMatrixValues(), layer1.getType());

		jTableMatrix.setModel(model);
			
        }//GEN-LAST:event_jButtonComputeActionPerformed

        private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetActionPerformed
		resultModel.clear();
		shapeFileUi1.reset();
		shapeFileUi2.reset();
		Layer.reset();
        }//GEN-LAST:event_jButtonResetActionPerformed

        private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
		System.exit(0);
        }//GEN-LAST:event_jButtonCloseActionPerformed

        private void jButtonExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportActionPerformed
		JFileChooser chooser = new JFileChooser();
		File file = chooser.getSelectedFile();
		
		int returnVal = chooser.showOpenDialog(getParent());
		if (returnVal == JFileChooser.APPROVE_OPTION){ 
		if(file == null){
			file = new File(chooser.getSelectedFile().toString());
		}	
		if(kappaCalculator != null){
			kappaCalculator.export(file);
			resultModel.addElement("Exporting to :"+file.toString());
		}
			
		}
		
        }//GEN-LAST:event_jButtonExportActionPerformed

        private void jTextFieldKappaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldKappaActionPerformed
                // TODO add your handling code here:
        }//GEN-LAST:event_jTextFieldKappaActionPerformed

public class MatrixModel extends AbstractTableModel{

	Object[][] data;
			
	Object[] headers;

	public MatrixModel(ArrayList<Object> values, double[][] matrix, String name){

		headers = new Object[values.size()+ 1];
		headers[0] =name;
		for(int i = 1; i < values.size()+ 1; i ++){
			headers[i] = values.get(i - 1);
		}
		
		data = new Object[matrix.length + 1][matrix.length + 1];
		for(int i = 0; i < values.size(); i ++){
			data[i][0] = values.get(i);
		}
		for(int i = 0; i < matrix.length; i ++){

			for(int j = 1; j < matrix.length + 1; j ++){
				data[i][j] = matrix[i][j - 1];
				System.out.println(" i "+i+" j "+j+" "+matrix[i][j - 1]+" ");
			}
		}
	}
	
	public String getId(){
		for(int i = 1; i < headers.length; i ++){
			if(data[2][i].equals(true)){
				return (String)headers[i];
			}

		}
		return null;
	}

	public String getType(){
		for(int i = 1; i < headers.length; i ++){
			if(data[1][i].equals(true)){
				return (String)headers[i];
			}

		}
		return null;

	}

	public String[] getUnselectedParameters(){
		ArrayList<String> paramNames = new ArrayList<String>();
		for(int i = 1; i < headers.length; i ++){
			if(data[0][i].equals(false)){
				paramNames.add((String)headers[i]);
			}

		}
		return paramNames.toArray(new String[paramNames.size()]);

	}
	@Override	
	public Class getColumnClass(int c) {
		return headers[c].getClass();
	} 
	public int getRowCount() {
		return data.length;
	}
	
	public int getColumnCount() {
		return headers.length;
	}
	
	public Object getValueAt(int rowIndex, int columnIndex) {
		return data[rowIndex][columnIndex];
	}
	public String getColumnName(int col) {
		return headers[col].toString();
	}
	
	public boolean isCellEditable(int row, int col) {
		//Note that the data/cell address is constant,
		//no matter where the cell appears onscreen.
		return true;
	}
	
	/*
         * Don't need to implement this method unless your table's
         * data can change.
         */
        public void setValueAt(Object value, int row, int col) {
            data[row][col] = value;
            fireTableCellUpdated(row, col);
        }
	}
        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton jButtonClose;
        private javax.swing.JButton jButtonCompute;
        private javax.swing.JButton jButtonExport;
        private javax.swing.JButton jButtonReset;
        private javax.swing.JLabel jLabel1;
        private javax.swing.JLabel jLabel2;
        private javax.swing.JLabel jLabel3;
        private javax.swing.JLabel jLabel4;
        private javax.swing.JList jListResult;
        private javax.swing.JPanel jPanel2;
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JScrollPane jScrollPane2;
        private javax.swing.JScrollPane jScrollPane3;
        private javax.swing.JTable jTable1;
        private javax.swing.JTable jTableMatrix;
        private javax.swing.JTextField jTextFieldKappa;
        private javax.swing.JTextField jTextFieldSd;
        private vectorialkappa.ShapeFileUi shapeFileUi1;
        private vectorialkappa.ShapeFileUi shapeFileUi2;
        // End of variables declaration//GEN-END:variables
}
